name: build-workflow

on:
  pull_request:
#   push:
#     paths-ignore:
#     - 'doc/**'
#     - '**.md'
#     - 'THANKS'
#     - 'LICENSE'
#     - 'NOTICE'

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04_x86_64
    name: Build hisui for ${{ matrix.os }}
    runs-on: ubuntu-20.04
    steps:
      - name: Install packages
        shell: bash
        run: |
          sudo apt update
          sudo apt install -yq nasm ccache
          sudo rm -rf /var/lib/apt/lists/*
        env:
            DEBIAN_FRONTEND: noninteractive
      - uses: actions/checkout@v2
      - name: Get Versions
        shell: bash
        run: |
          source VERSION
          echo "::set-output name=libvpx_version::${LIBVPX_VERSION}"
        id: versions
      - name: Cache libvpx ${{ steps.versions.outputs.libvpx_version }}
        id: cache-libvpx
        uses: actions/cache@v2
        with:
          path: third_party/libvpx
          key: ${{ matrix.os }}-libvpx-${{ hashFiles(format('{0}{1}', github.workspace, '/third_party/libvpx/libvpx.a')) }}
          restore-keys: ${{ matrix.os }}-libvpx-
      - name: Clear libvpx
        if: steps.cache-libvpx.outputs.cache-hit != 'true'
        run: rm -rf third_party/libvpx
      - name: Cache ccache
        id: cache-ccache
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{ matrix.os }}-ccache-
      - run: ./build.bash ${{ matrix.os }} --package --use-ccache
        timeout-minutes: 120
      - name: Output package name
        shell: bash
        run: |
          source VERSION
          echo "PACKAGE_NAME=hisui-${HISUI_VERSION}_${{ matrix.os }}.tar.gz" >> ${{ matrix.os }}.env
          echo "CONTENT_TYPE=application/gzip" >> ${{ matrix.os }}.env
          echo "::set-output name=name::hisui-${HISUI_VERSION}_${{ matrix.os }}.tar.gz"
        id: package_name
      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-hisui-binary
          path: release/hisui
          if-no-files-found: error
      - name: Upload tarball
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.package_name.outputs.name }}
          path: release/${{ steps.package_name.outputs.name }}
          if-no-files-found: error
      - name: Upload Environment
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}.env
          path: ${{ matrix.os }}.env
          if-no-files-found: error
  push-to-dockerhub:
    name: Push to Docker Hub
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04_x86_64
    needs:
      - build-linux
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Mkdir release
        shell: bash
        run: |
          mkdir release
      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os }}-hisui-binary
          path: release/hisui
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: shiguredo/hisui:2020.01-test
          platforms: linux/amd64
          file: docker/Dockerfile
  create-release:
    name: Create Release
    if: contains(github.ref, 'tags/202')
    needs:
      - build-linux
    runs-on: ubuntu-20.04
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Output upload url
        shell: bash
        run: echo "UPLOAD_URL='${{ steps.create_release.outputs.upload_url }}'" > create-release.env
      - name: Upload create-release Environment
        uses: actions/upload-artifact@v1
        with:
          name: create-release.env
          path: create-release.env
  upload-assets:
    name: Upload Assets to Release
    needs:
      - create-release
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-20.04_x86_64
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os }}.env
      - uses: actions/download-artifact@v2
        with:
          name: create-release.env
      - name: Env to output
        shell: bash
        run: |
          source ${{ matrix.os }}.env/${{ matrix.os }}.env
          source create-release.env/create-release.env
          echo "::set-output name=package_name::$PACKAGE_NAME"
          echo "::set-output name=content_type::$CONTENT_TYPE"
          echo "::set-output name=upload_url::$UPLOAD_URL"
        id: env
      - uses: actions/download-artifact@v2
        with:
          name: ${{ steps.env.outputs.package_name }}
      - name: Upload ${{ matrix.os }} Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.env.outputs.upload_url }}
          asset_path: ${{ steps.env.outputs.package_name }}/${{ steps.env.outputs.package_name }}
          asset_name: ${{ steps.env.outputs.package_name }}
          asset_content_type: ${{ steps.env.outputs.content_type }}
